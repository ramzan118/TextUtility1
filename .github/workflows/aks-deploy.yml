- name: Deploy to AKS
  run: |
    # Retrieve AKS credentials
    az aks get-credentials \
      --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
      --name ${{ secrets.AKS_CLUSTER_NAME }} \
      --overwrite-existing
    
    # Ensure AKS has access to ACR
    az aks update -n ${{ secrets.AKS_CLUSTER_NAME }} \
      -g ${{ secrets.AKS_RESOURCE_GROUP }} \
      --attach-acr ${{ secrets.REGISTRY_NAME }}
    
    # Create deployment if not exists
    if ! kubectl get deployment react-app -n default; then
      kubectl create deployment react-app \
        --image=${{ secrets.REGISTRY_NAME }}.azurecr.io/react-app:${{ github.sha }} \
        --replicas=1 \  # Start with 1 replica for debugging
        -n default
    fi
    
    # Update deployment
    kubectl set image deployment/react-app \
      react-app=${{ secrets.REGISTRY_NAME }}.azurecr.io/react-app:${{ github.sha }} \
      -n default
    
    # Wait for rollout with timeout
    kubectl rollout status deployment/react-app -n default --timeout=120s
    
    # Get debug information if rollout fails
    if [ $? -ne 0 ]; then
      echo "::error::Deployment failed!"
      echo "=== Pods ==="
      kubectl get pods -n default -o wide
      
      echo "=== Events ==="
      kubectl get events -n default --sort-by='.lastTimestamp'
      
      echo "=== Pod Logs ==="
      for pod in $(kubectl get pods -n default -l app=react-app -o jsonpath='{.items[*].metadata.name}'); do
        echo "Logs for $pod:"
        kubectl logs $pod -n default
      done
      
      exit 1
    fi
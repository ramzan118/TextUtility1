name: Blue-Green Deployment to AKS Serverless

on:
  push:
    branches:
      - aksremote

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to ACR
      run: |
        USERNAME=$(az acr credential show -n ${{ secrets.REGISTRY_NAME }} --query username -o tsv)
        PASSWORD=$(az acr credential show -n ${{ secrets.REGISTRY_NAME }} --query passwords[0].value -o tsv)
        docker login ${{ secrets.REGISTRY_NAME }}.azurecr.io -u "$USERNAME" -p "$PASSWORD"

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.REGISTRY_NAME }}.azurecr.io/react-app:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY_NAME }}.azurecr.io/react-app:${{ github.sha }}

    - name: Setup Kubernetes Context
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }} \
          --overwrite-existing
        
        az aks update -n ${{ secrets.AKS_CLUSTER_NAME }} \
          -g ${{ secrets.AKS_RESOURCE_GROUP }} \
          --attach-acr ${{ secrets.REGISTRY_NAME }}

    - name: Blue-Green Deployment
      id: deploy
      run: |
        # Determine active deployment
        CURRENT_COLOR=$(kubectl get svc react-app-service -o jsonpath='{.spec.selector.color}' || echo "blue")
        NEW_COLOR=$([ "$CURRENT_COLOR" = "blue" ] && echo "green" || echo "blue")
        
        # Deploy new version
        sed "s|REPLACE_IMAGE|${{ secrets.REGISTRY_NAME }}.azurecr.io/react-app:${{ github.sha }}|g" deployment-template.yaml | \
          sed "s/REPLACE_COLOR/$NEW_COLOR/g" | \
          kubectl apply -f -

        # Wait for new deployment to be ready
        kubectl rollout status deployment/react-app-$NEW_COLOR --timeout=180s
        
        # Update service to new color
        kubectl patch svc react-app-service -p "{\"spec\":{\"selector\":{\"color\":\"$NEW_COLOR\"}}}"
        
        # Scale down previous deployment
        kubectl scale deployment/react-app-$CURRENT_COLOR --replicas=0
        
        # Set outputs
        echo "NEW_COLOR=$NEW_COLOR" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Slack Notification Success
      if: steps.deploy.outputs.status == 'success'
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": ":white_check_mark: *Deployment Succeeded* \n*Environment*: AKS Serverless \n*Commit*: ${{ github.sha }} \n*New Color*: ${{ steps.deploy.outputs.NEW_COLOR }} \n*Logs*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "channel": "ecs-fargate-deployment-notifications"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Slack Notification Failure
      if: failure()
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": ":x: *Deployment Failed* \n*Environment*: AKS Serverless \n*Commit*: ${{ github.sha }} \n*Logs*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "channel": "ecs-fargate-deployment-notifications"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}